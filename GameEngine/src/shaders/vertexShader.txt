#version 330 core

const int l = 12;

in vec3 position;
in vec2 textureCoords;
in vec3 normal;

out vec2 pass_textureCoords;
out vec3 surfaceNormal;
out vec3 toLightVector[l];
out vec3 toCameraVector;

uniform mat4 transfomationMat;
uniform mat4 projectionMat;
uniform mat4 viewMat;
uniform vec3 lightPos[l];

uniform float useFakeLighting;

uniform vec4 plane;


void main(void) {

	vec4 worldPosition = transfomationMat * vec4(position,1.0);
	
	gl_ClipDistance[0] = dot(worldPosition, plane);
	
	gl_Position = projectionMat * viewMat * transfomationMat *  vec4(position,1.0);
	pass_textureCoords = textureCoords; 
	
	vec3 actualNormal = normal;
	if(useFakeLighting > 0.5){
		actualNormal = vec3(0.0,1.0,0.0);
	}
	
	surfaceNormal = (transfomationMat * vec4(actualNormal,0.0)).xyz;
	for(int i = 0; i < l; i++){
		toLightVector[i] = lightPos[i] - worldPosition.xyz;
	}
	toCameraVector = (inverse(viewMat) * vec4(0.0,0.0,0.0,1.0)).xyz - worldPosition.xyz;
	
	
}